#+title: Final Report: Boo-Bot
# #+author: Devin Pohl
# #+author: Daniel Garcia
#+date: 4/30/2021
#+description: Project is done, time to get our grade and get out

* Org Preamble                                                       :ignore:
** Org Options                                                      :ignore:
# Do not export table of contents
# Use smart quotes
# Do not export TODO/progress tracking
#+options: toc:nil ':t todo:nil

** Tangle Hacks                                                     :ignore:
# This document needs some auto tangling

#+NAME: tangle-it
#+BEGIN_SRC emacs-lisp :exports none
  (org-babel-tangle)
#+END_SRC
#+BEGIN_SRC text :results silent :noweb yes :exports results
  <<tangle-it()>>
#+END_SRC

** Latex Class + IEEE Compliance                                    :ignore:
# https://github.com/Shizcow/dotfiles/blob/master/emacs/conf.org#general-config
#+latex_class: IEEE
#+latex_class_options: [10pt, final, conference]

*** Author + Affiliations                                          :ignore:
# IEEEtrans requires some special attention to author formatting to get affiliations right
# Need to drop down to latex AND get this into header so this needs a little bit
#   of babel magic. Auto tangle managed by [[Tangle Hacks]] section

#+latex_header: \usepackage{authorhacks}

#+name: authorhacks
#+begin_src latex :tangle authorhacks.sty :exports none
\author{\IEEEauthorblockN{Devin Pohl}
  \IEEEauthorblockA{
    Department of Electrical and Computer Engineering\\
    Colorado State University\\
    Email: \href{mailto:Devin.Pohl@colostate.edu}{Devin.Pohl@colostate.edu}}
  \and
  \IEEEauthorblockN{Daniel Garcia}
  \IEEEauthorblockA{
    Department of Computer Science\\
    Colorado State University\\
    Email: \href{mailto:daniel95@rams.colostate.edu}{daniel95@rams.colostate.edu}}}
#+end_src

*** MISC Latex Formatting                                          :ignore:
**** Fix Formatting for Long Links in References                  :ignore:
#+LaTeX_HEADER: \def\UrlBreaks{\do\/\do-}

**** Tables                                                       :ignore:
# Provides a P{width} tabular environment
#+LaTeX_HEADER: \usepackage{array}
#+LaTeX_HEADER: \newcolumntype{P}[1]{>{\centering\arraybackslash}p{#1}}

* General Notes                                                      :ignore:
#+begin_comment
The final report that you will submit will be a complete documentation of your project. In addition, the
code developed will also need to be submitted.
This report should be between 1500-2500 words excluding references. The report must include several
elements, each of which will be a separate section. These are already outlined in this document.
#+end_comment

* DONE Abstract                                                      :ignore:
#+begin_comment
Compact one-paragraph overview of the project
#+end_comment

# this block generates the correct formatting, hence the :ignore:
#+begin_abstract
This project presents a small, remote controlled robot.
This robot, nicknamed the "Boo-Bot" by the authors, is capable of sending real-time video/audio and taking real-time controls over the internet, allowing it to be controlled from anywhere with a network connection.
This is showcased by a specific development of the project: interfacing over a Twitch live-stream.
Throughout development this project has been made as from-scratch as possible.
This has included designing of circuitry, PCBs, and 3D printed parts, as well as significant programming for drivers, communication, and interaction.
#+end_abstract

* DONE Introduction
#+begin_comment
No description was provided so I'm winging it

Abstract but longer:
- What is the bot?
  - Why did we make it?
  - What have we done?
- Was this project a success?
#+end_comment

Built as a semester project for CS 370, Colorado State University's Operating Systems Course, /Boo-Bot/ is a robot: small, self-contained, remote-controlled, high-quality, and designed from the ground up.
It is made to answer the lack of a cheap, commercially available, semi-autonomous, long-distance, highly-portable IOT device for animate telecommunication.
Despite the numerous challenges encountered during development, the final product is considered a successful implementation, providing significant learning experiences for the authors.
In design and construction, the device provided key insights into areas of robotics, circuitry, and of course, operating systems.
This paper provides an overview on why this project exists, the process of its design, and how that design was implemented.
And while this paper presents a completed prototype, it is just that: a prototype.
Additional development will be done in the future.

There are two main areas of development in this project: hardware and software.
The first area, hardware, took the most time.
Between custom designing a PCB to drive several peripherals, and designing and 3D printing the chassis, a diverse set of skills were required.
The second area, software, was not without its developments.
With components including GPIO interfacing, IRC communication, video streaming, and operating system interfacing, a healthy mix of written-from-scratch software, libraries, and complete pre-existing software was employed.
Adding that all the software written requires non-trivial cross-compilation, several learning opportunities presented themselves.

* DONE Problem Characterization
#+begin_comment
This is a technical description of the problem. Your audience is
your peers so present it in a way that they can appreciate.
#+end_comment

The need for this project was born from a simple desire to experience a remote place.
While photos and videos provide a good approximation, they lack integration.
Virtual reality, while a great solution, is prohibitively expensive and lacks any sort of real-time factor.
The solution, of course, is a remote controlled robot.
However, long-distance remote controlled robots are few and far between in commercial spaces and often unable to provide a reasonable price tag.
Designing and implementing this robot in-house is the clear solution.

With the end-goal in mind, specific objectives and constraints were then drafted.
After careful consideration, we decided on the following set of items:
- Low cost: The target was $150 for a prototype unit.
- Small size: To ensure portability, low power consumption, and a more satisfying end product.
- Cleanliness: We wanted this to be done right. This required a custom PCB to improve cable management.
- Many peripherals: With a slew of sensors, motors, and other devices planned, this required a competent development board.
- High quality software: This decision lead us to the Rust programming language.
- Potential for future work: Required significant focus on easily installing and upgrading parts down the line when more development occurs.
- Low work duplication: Not wanting to completely re-invent the wheel, we wanted to use a popular ecosystem with plenty of community development.

With the problem described and a list of goals outlined, specific design decisions could be made.
These will be discussed in further sections of this paper.

* TODO Proposed Solution and Implementation Strategy
#+begin_comment
Include i. Methodology and ii. a description of the libraries that you have used and what you did on your own.

Actually including:
- Methodology
- Software
- Hardware
#+end_comment

This is a project with an abundance of moving parts.
Most importantly is that both software and hardware have a large amount of notable developments.
As such, this section will include a description of work done on hardware: first explaining the various pre-built tools utilized in this project, then the original work on software, and finally the original work on hardware.

** DONE Methodology
#+begin_comment
Talk about:
- GitHub repo
- Rust
- RPI
- Hardware shit
#+end_comment

Due to the scope of this project, a large amount of existing solutions were used.
This includes development tools for both hardware and software.
On the hardware side is the development board and peripherals.
The board we chose for the task is a Raspberry Pi 3 A+, decided on due to its low cost, abundance of ports, and vast community support.
While we initially planned on using stepper motors, the output torque of the motors we chose was too low.
This resulted in us using standard DC motors for a first prototype that were on hand; we will return to stepper motors in further iterations of this project in the future.
We also included a speaker amplifier, microphone, and several miscellaneous sensors.
For a complete list of hardware, including sensors, electrical components, and material, see [[Bill of Materials][Appendix A]].
All hardware in this list has been successfully integrated into the current prototype.

The software side of this project uses a large amount of pre-built solutions, the largest of which being the operating system.
Running on the Raspberry Pi 3 A+ is Raspbian Lite with a few modifications.
These modifications are in the form of SPI-interfacing systemd modules, used to drive the microphone cite:unknown-2017-overv-adafr and speaker amplifier cite:unknown-2016-overv-adafr.
Several shell-based programs are used in the current ecosystem as well:
- raspivid cite:unknown-2020-raspivid-github: Used to read video data from the standard Raspberry Pi camera.
- ffmpeg cite:ffmpeg-2021-ffmpeg-ffmpeg: Used to process video and stream to Twitch.
- Flite cite:black-2018-flite-github: Used for text-to-speech. Allows the bot to read Twitch chat out-loud.
All other software is written from scratch, using the Rust programming language.
Source code, explained further in [[Software]], is hosted on GitHub cite:pohl-2021-shizc-boobot.

Hardware development can be seperated into two main categories: CAD and PCB.
The CAD development culminated in the 3D printed chassis; parts were developed in AutoCAD and printed on Prusa i3 MK3S+ 3D printers.
PCB development was done in EasyEDA, culminating in a custom hat for the Raspberry Pi to interface and power all peripherals.
All aspects of hardware development are explained below.

** DONE Software

For this prototype, a git repository was set up, hosted on GitHub cite:pohl-2021-shizc-boobot.
This repository holds all code written for this project, as well as all documentation.
The main implementation language is Rust, which occasionally uses OS calls to spawn the shell-based programs described above.
The only notable crate (Rust's term for a library) used is twitchchat cite:ree-2021-github.
It is essentially an IRC client implementation with Twitch-specific features -- Twitch chat is a /very/ non-standard IRC.
Additional minor crates can be found at the GitHub repository cite:pohl-2021-shizc-boobot.
All other code simply leverages the Rust standard library; this includes code for GPIO manipulation, process spawning, shell interaction, configuration reading, and connection to Twitch.
Essentially the main program reads from a configuration file, connects to Twitch, and dispatches commands such as moving motors via GPIO, calling Flite for text-to-speech, and relaying system info back to chat.
Additionally, admin controls were implemented to allow for fine-grain control over what users are allowed to run what commands in chat at what times.

** TODO Hardware

This prototype uses a vast amount of sensors and actuators. Due to such complexities in hardware, a custom PCB was required to simplify the assembly process.
The PCB was designed to fit as a hat on the pi for quick removal in development. The PCB design was done using EasyEDA and manufactured through JLCPCB.
A major focus for the PCB design was compatibility. Design considerations were taken from component datasheets and standardized GPIO pins.
This prototype is a very visual device. Therefore, careful consideration was employed in designing a visually appealing device.
Excluding the translucent dome, all 3D parts were designed using AutoCAD. Reference dimensions when designing were taken from datasheets.
For components lacking datasheets, measurements were done manually. Finally, once all parts were designed, 3D models were printed with a Prusa i3 MK3S+.

* TODO Conclusions

In conclusion, this project turned out to be a successful implementation of a highly portable IoT device. The learning experience in robotics, electronics, and operating systems was highly remarkable. This project inspired further implementations in the later planned iterations.

* DONE Bibliography                                                  :ignore:
# cite generates its own (correct) references heading, hence the :ignore:
bibliographystyle:IEEEtran
bibliography:references.bib

#+latex: \appendices
* TODO Bill of Materials
# TODO: format this so it doesn't look like shit in twocolumn
Below is a bill of materials for this project, including all hardware used.
All hardware present has been successfully integrated into the current iteration of the prototype.

#+begin_center
#+latex: \footnotesize
#+latex: \renewcommand{\arraystretch}{1.7}
#+ATTR_LATEX: :align r|lr|p{6.5cm}|r
| Amount | Component         | Price Ea ($) | Description                                              | Cost ($) |
|--------+-------------------+--------------+----------------------------------------------------------+----------|
|     10 | Capacitors        |        0.466 | 16v 1000UF Electrolitic SMD                              |     4.66 |
|      2 | Drivers           |         7.82 | 39-1500RPM DC 6V Electric Motor with Gear Box            |    15.64 |
|      2 | Motors            |         3.98 | MINEBEA NMB 2-phase 4-Wire 18\textdegree{} Stepper Motor |     7.96 |
|      1 | 9-axis MPU        |         4.60 | MPU9250 (Gyro, Accelerometer, Compass)                   |     4.60 |
|      1 | ADC               |         1.69 | INA219  DC current and voltage sensor                    |     1.69 |
|      1 | Amp               |         4.99 | MAX98357A I2S Class D amplifier                          |     4.99 |
|      1 | Lipo              |        15.05 | Lipo battery pack                                        |    15.05 |
|      1 | Microphone        |         7.51 | I2S MEMS Microphone SPH0645LM4H                          |     7.51 |
|      1 | PCB               |         8.00 | 5 Custom PCBs from EASY EDA                              |     8.00 |
|      1 | PLA Filament      |         5.00 | 100g Black PLA filament 1.75 mm                          |     5.00 |
|      1 | Raspberry pi      |        29.99 | Raspberry Pi 3 Model A+ 2018 model                       |    29.99 |
|      1 | SD Card           |         5.00 | 32 GB Class 10 Micro SD Card                             |     5.00 |
|      1 | Servo             |         1.79 | SG90 9G Micro Servo Motor                                |     1.79 |
|      1 | Speaker           |         0.99 | 8 ohm speaker                                            |     0.99 |
|      1 | Voltage Regulator |         0.79 | B628 3-24V to 12V 2A Adjustable Boost Step-Up Converter  |     0.79 |
|--------+-------------------+--------------+----------------------------------------------------------+----------|
|        |                   |              | Total:                                                   |   113.66 |
#+TBLFM: @>$>='(format "%.2f" (apply '+ '(@<<..@>>)));N::@<<$>..@>>$>='(format "%.2f" (* $< $<<<));N

#+latex: \normalsize
#+end_center
